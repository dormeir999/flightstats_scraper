Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expression
Rule 1     expression -> INT
Rule 2     expression -> FLOAT
Rule 3     expression -> STRING
Rule 4     expression -> LPAREN expression RPAREN
Rule 5     expression -> expression PLUS expression
Rule 6     expression -> expression MINUS expression
Rule 7     expression -> expression TIMES expression
Rule 8     expression -> expression DIVIDE expression
Rule 9     expression -> expression MODULO expression
Rule 10    expression -> MINUS expression
Rule 11    expression -> TAGPATTERN
Rule 12    expression -> NAME LPAREN args RPAREN
Rule 13    args -> expression COMMA args
Rule 14    args -> expression
Rule 15    args -> <empty>

Terminals, with rules where they appear

COMMA                : 13
DIVIDE               : 8
FLOAT                : 2
INT                  : 1
LPAREN               : 4 12
MINUS                : 6 10
MODULO               : 9
NAME                 : 12
PLUS                 : 5
RPAREN               : 4 12
STRING               : 3
TAGPATTERN           : 11
TIMES                : 7
error                : 

Nonterminals, with rules where they appear

args                 : 12 13
expression           : 4 5 5 6 6 7 7 8 8 9 9 10 13 14 0

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . INT
    (2) expression -> . FLOAT
    (3) expression -> . STRING
    (4) expression -> . LPAREN expression RPAREN
    (5) expression -> . expression PLUS expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . expression TIMES expression
    (8) expression -> . expression DIVIDE expression
    (9) expression -> . expression MODULO expression
    (10) expression -> . MINUS expression
    (11) expression -> . TAGPATTERN
    (12) expression -> . NAME LPAREN args RPAREN

    INT             shift and go to state 2
    FLOAT           shift and go to state 3
    STRING          shift and go to state 4
    LPAREN          shift and go to state 5
    MINUS           shift and go to state 6
    TAGPATTERN      shift and go to state 7
    NAME            shift and go to state 8

    expression                     shift and go to state 1

state 1

    (0) S' -> expression .
    (5) expression -> expression . PLUS expression
    (6) expression -> expression . MINUS expression
    (7) expression -> expression . TIMES expression
    (8) expression -> expression . DIVIDE expression
    (9) expression -> expression . MODULO expression

    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    TIMES           shift and go to state 11
    DIVIDE          shift and go to state 12
    MODULO          shift and go to state 13


state 2

    (1) expression -> INT .

    PLUS            reduce using rule 1 (expression -> INT .)
    MINUS           reduce using rule 1 (expression -> INT .)
    TIMES           reduce using rule 1 (expression -> INT .)
    DIVIDE          reduce using rule 1 (expression -> INT .)
    MODULO          reduce using rule 1 (expression -> INT .)
    $end            reduce using rule 1 (expression -> INT .)
    RPAREN          reduce using rule 1 (expression -> INT .)
    COMMA           reduce using rule 1 (expression -> INT .)


state 3

    (2) expression -> FLOAT .

    PLUS            reduce using rule 2 (expression -> FLOAT .)
    MINUS           reduce using rule 2 (expression -> FLOAT .)
    TIMES           reduce using rule 2 (expression -> FLOAT .)
    DIVIDE          reduce using rule 2 (expression -> FLOAT .)
    MODULO          reduce using rule 2 (expression -> FLOAT .)
    $end            reduce using rule 2 (expression -> FLOAT .)
    RPAREN          reduce using rule 2 (expression -> FLOAT .)
    COMMA           reduce using rule 2 (expression -> FLOAT .)


state 4

    (3) expression -> STRING .

    PLUS            reduce using rule 3 (expression -> STRING .)
    MINUS           reduce using rule 3 (expression -> STRING .)
    TIMES           reduce using rule 3 (expression -> STRING .)
    DIVIDE          reduce using rule 3 (expression -> STRING .)
    MODULO          reduce using rule 3 (expression -> STRING .)
    $end            reduce using rule 3 (expression -> STRING .)
    RPAREN          reduce using rule 3 (expression -> STRING .)
    COMMA           reduce using rule 3 (expression -> STRING .)


state 5

    (4) expression -> LPAREN . expression RPAREN
    (1) expression -> . INT
    (2) expression -> . FLOAT
    (3) expression -> . STRING
    (4) expression -> . LPAREN expression RPAREN
    (5) expression -> . expression PLUS expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . expression TIMES expression
    (8) expression -> . expression DIVIDE expression
    (9) expression -> . expression MODULO expression
    (10) expression -> . MINUS expression
    (11) expression -> . TAGPATTERN
    (12) expression -> . NAME LPAREN args RPAREN

    INT             shift and go to state 2
    FLOAT           shift and go to state 3
    STRING          shift and go to state 4
    LPAREN          shift and go to state 5
    MINUS           shift and go to state 6
    TAGPATTERN      shift and go to state 7
    NAME            shift and go to state 8

    expression                     shift and go to state 14

state 6

    (10) expression -> MINUS . expression
    (1) expression -> . INT
    (2) expression -> . FLOAT
    (3) expression -> . STRING
    (4) expression -> . LPAREN expression RPAREN
    (5) expression -> . expression PLUS expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . expression TIMES expression
    (8) expression -> . expression DIVIDE expression
    (9) expression -> . expression MODULO expression
    (10) expression -> . MINUS expression
    (11) expression -> . TAGPATTERN
    (12) expression -> . NAME LPAREN args RPAREN

    INT             shift and go to state 2
    FLOAT           shift and go to state 3
    STRING          shift and go to state 4
    LPAREN          shift and go to state 5
    MINUS           shift and go to state 6
    TAGPATTERN      shift and go to state 7
    NAME            shift and go to state 8

    expression                     shift and go to state 15

state 7

    (11) expression -> TAGPATTERN .

    PLUS            reduce using rule 11 (expression -> TAGPATTERN .)
    MINUS           reduce using rule 11 (expression -> TAGPATTERN .)
    TIMES           reduce using rule 11 (expression -> TAGPATTERN .)
    DIVIDE          reduce using rule 11 (expression -> TAGPATTERN .)
    MODULO          reduce using rule 11 (expression -> TAGPATTERN .)
    $end            reduce using rule 11 (expression -> TAGPATTERN .)
    RPAREN          reduce using rule 11 (expression -> TAGPATTERN .)
    COMMA           reduce using rule 11 (expression -> TAGPATTERN .)


state 8

    (12) expression -> NAME . LPAREN args RPAREN

    LPAREN          shift and go to state 16


state 9

    (5) expression -> expression PLUS . expression
    (1) expression -> . INT
    (2) expression -> . FLOAT
    (3) expression -> . STRING
    (4) expression -> . LPAREN expression RPAREN
    (5) expression -> . expression PLUS expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . expression TIMES expression
    (8) expression -> . expression DIVIDE expression
    (9) expression -> . expression MODULO expression
    (10) expression -> . MINUS expression
    (11) expression -> . TAGPATTERN
    (12) expression -> . NAME LPAREN args RPAREN

    INT             shift and go to state 2
    FLOAT           shift and go to state 3
    STRING          shift and go to state 4
    LPAREN          shift and go to state 5
    MINUS           shift and go to state 6
    TAGPATTERN      shift and go to state 7
    NAME            shift and go to state 8

    expression                     shift and go to state 17

state 10

    (6) expression -> expression MINUS . expression
    (1) expression -> . INT
    (2) expression -> . FLOAT
    (3) expression -> . STRING
    (4) expression -> . LPAREN expression RPAREN
    (5) expression -> . expression PLUS expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . expression TIMES expression
    (8) expression -> . expression DIVIDE expression
    (9) expression -> . expression MODULO expression
    (10) expression -> . MINUS expression
    (11) expression -> . TAGPATTERN
    (12) expression -> . NAME LPAREN args RPAREN

    INT             shift and go to state 2
    FLOAT           shift and go to state 3
    STRING          shift and go to state 4
    LPAREN          shift and go to state 5
    MINUS           shift and go to state 6
    TAGPATTERN      shift and go to state 7
    NAME            shift and go to state 8

    expression                     shift and go to state 18

state 11

    (7) expression -> expression TIMES . expression
    (1) expression -> . INT
    (2) expression -> . FLOAT
    (3) expression -> . STRING
    (4) expression -> . LPAREN expression RPAREN
    (5) expression -> . expression PLUS expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . expression TIMES expression
    (8) expression -> . expression DIVIDE expression
    (9) expression -> . expression MODULO expression
    (10) expression -> . MINUS expression
    (11) expression -> . TAGPATTERN
    (12) expression -> . NAME LPAREN args RPAREN

    INT             shift and go to state 2
    FLOAT           shift and go to state 3
    STRING          shift and go to state 4
    LPAREN          shift and go to state 5
    MINUS           shift and go to state 6
    TAGPATTERN      shift and go to state 7
    NAME            shift and go to state 8

    expression                     shift and go to state 19

state 12

    (8) expression -> expression DIVIDE . expression
    (1) expression -> . INT
    (2) expression -> . FLOAT
    (3) expression -> . STRING
    (4) expression -> . LPAREN expression RPAREN
    (5) expression -> . expression PLUS expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . expression TIMES expression
    (8) expression -> . expression DIVIDE expression
    (9) expression -> . expression MODULO expression
    (10) expression -> . MINUS expression
    (11) expression -> . TAGPATTERN
    (12) expression -> . NAME LPAREN args RPAREN

    INT             shift and go to state 2
    FLOAT           shift and go to state 3
    STRING          shift and go to state 4
    LPAREN          shift and go to state 5
    MINUS           shift and go to state 6
    TAGPATTERN      shift and go to state 7
    NAME            shift and go to state 8

    expression                     shift and go to state 20

state 13

    (9) expression -> expression MODULO . expression
    (1) expression -> . INT
    (2) expression -> . FLOAT
    (3) expression -> . STRING
    (4) expression -> . LPAREN expression RPAREN
    (5) expression -> . expression PLUS expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . expression TIMES expression
    (8) expression -> . expression DIVIDE expression
    (9) expression -> . expression MODULO expression
    (10) expression -> . MINUS expression
    (11) expression -> . TAGPATTERN
    (12) expression -> . NAME LPAREN args RPAREN

    INT             shift and go to state 2
    FLOAT           shift and go to state 3
    STRING          shift and go to state 4
    LPAREN          shift and go to state 5
    MINUS           shift and go to state 6
    TAGPATTERN      shift and go to state 7
    NAME            shift and go to state 8

    expression                     shift and go to state 21

state 14

    (4) expression -> LPAREN expression . RPAREN
    (5) expression -> expression . PLUS expression
    (6) expression -> expression . MINUS expression
    (7) expression -> expression . TIMES expression
    (8) expression -> expression . DIVIDE expression
    (9) expression -> expression . MODULO expression

    RPAREN          shift and go to state 22
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    TIMES           shift and go to state 11
    DIVIDE          shift and go to state 12
    MODULO          shift and go to state 13


state 15

    (10) expression -> MINUS expression .
    (5) expression -> expression . PLUS expression
    (6) expression -> expression . MINUS expression
    (7) expression -> expression . TIMES expression
    (8) expression -> expression . DIVIDE expression
    (9) expression -> expression . MODULO expression

    PLUS            reduce using rule 10 (expression -> MINUS expression .)
    MINUS           reduce using rule 10 (expression -> MINUS expression .)
    TIMES           reduce using rule 10 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 10 (expression -> MINUS expression .)
    MODULO          reduce using rule 10 (expression -> MINUS expression .)
    $end            reduce using rule 10 (expression -> MINUS expression .)
    RPAREN          reduce using rule 10 (expression -> MINUS expression .)
    COMMA           reduce using rule 10 (expression -> MINUS expression .)

  ! PLUS            [ shift and go to state 9 ]
  ! MINUS           [ shift and go to state 10 ]
  ! TIMES           [ shift and go to state 11 ]
  ! DIVIDE          [ shift and go to state 12 ]
  ! MODULO          [ shift and go to state 13 ]


state 16

    (12) expression -> NAME LPAREN . args RPAREN
    (13) args -> . expression COMMA args
    (14) args -> . expression
    (15) args -> .
    (1) expression -> . INT
    (2) expression -> . FLOAT
    (3) expression -> . STRING
    (4) expression -> . LPAREN expression RPAREN
    (5) expression -> . expression PLUS expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . expression TIMES expression
    (8) expression -> . expression DIVIDE expression
    (9) expression -> . expression MODULO expression
    (10) expression -> . MINUS expression
    (11) expression -> . TAGPATTERN
    (12) expression -> . NAME LPAREN args RPAREN

    RPAREN          reduce using rule 15 (args -> .)
    INT             shift and go to state 2
    FLOAT           shift and go to state 3
    STRING          shift and go to state 4
    LPAREN          shift and go to state 5
    MINUS           shift and go to state 6
    TAGPATTERN      shift and go to state 7
    NAME            shift and go to state 8

    args                           shift and go to state 23
    expression                     shift and go to state 24

state 17

    (5) expression -> expression PLUS expression .
    (5) expression -> expression . PLUS expression
    (6) expression -> expression . MINUS expression
    (7) expression -> expression . TIMES expression
    (8) expression -> expression . DIVIDE expression
    (9) expression -> expression . MODULO expression

    PLUS            reduce using rule 5 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 5 (expression -> expression PLUS expression .)
    $end            reduce using rule 5 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 5 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 5 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 11
    DIVIDE          shift and go to state 12
    MODULO          shift and go to state 13

  ! TIMES           [ reduce using rule 5 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 5 (expression -> expression PLUS expression .) ]
  ! MODULO          [ reduce using rule 5 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 9 ]
  ! MINUS           [ shift and go to state 10 ]


state 18

    (6) expression -> expression MINUS expression .
    (5) expression -> expression . PLUS expression
    (6) expression -> expression . MINUS expression
    (7) expression -> expression . TIMES expression
    (8) expression -> expression . DIVIDE expression
    (9) expression -> expression . MODULO expression

    PLUS            reduce using rule 6 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 6 (expression -> expression MINUS expression .)
    $end            reduce using rule 6 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 6 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 6 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 11
    DIVIDE          shift and go to state 12
    MODULO          shift and go to state 13

  ! TIMES           [ reduce using rule 6 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 6 (expression -> expression MINUS expression .) ]
  ! MODULO          [ reduce using rule 6 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 9 ]
  ! MINUS           [ shift and go to state 10 ]


state 19

    (7) expression -> expression TIMES expression .
    (5) expression -> expression . PLUS expression
    (6) expression -> expression . MINUS expression
    (7) expression -> expression . TIMES expression
    (8) expression -> expression . DIVIDE expression
    (9) expression -> expression . MODULO expression

    PLUS            reduce using rule 7 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 7 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 7 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 7 (expression -> expression TIMES expression .)
    MODULO          reduce using rule 7 (expression -> expression TIMES expression .)
    $end            reduce using rule 7 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 7 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 7 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 9 ]
  ! MINUS           [ shift and go to state 10 ]
  ! TIMES           [ shift and go to state 11 ]
  ! DIVIDE          [ shift and go to state 12 ]
  ! MODULO          [ shift and go to state 13 ]


state 20

    (8) expression -> expression DIVIDE expression .
    (5) expression -> expression . PLUS expression
    (6) expression -> expression . MINUS expression
    (7) expression -> expression . TIMES expression
    (8) expression -> expression . DIVIDE expression
    (9) expression -> expression . MODULO expression

    PLUS            reduce using rule 8 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 8 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 8 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 8 (expression -> expression DIVIDE expression .)
    MODULO          reduce using rule 8 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 8 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 8 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 8 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 9 ]
  ! MINUS           [ shift and go to state 10 ]
  ! TIMES           [ shift and go to state 11 ]
  ! DIVIDE          [ shift and go to state 12 ]
  ! MODULO          [ shift and go to state 13 ]


state 21

    (9) expression -> expression MODULO expression .
    (5) expression -> expression . PLUS expression
    (6) expression -> expression . MINUS expression
    (7) expression -> expression . TIMES expression
    (8) expression -> expression . DIVIDE expression
    (9) expression -> expression . MODULO expression

    PLUS            reduce using rule 9 (expression -> expression MODULO expression .)
    MINUS           reduce using rule 9 (expression -> expression MODULO expression .)
    TIMES           reduce using rule 9 (expression -> expression MODULO expression .)
    DIVIDE          reduce using rule 9 (expression -> expression MODULO expression .)
    MODULO          reduce using rule 9 (expression -> expression MODULO expression .)
    $end            reduce using rule 9 (expression -> expression MODULO expression .)
    RPAREN          reduce using rule 9 (expression -> expression MODULO expression .)
    COMMA           reduce using rule 9 (expression -> expression MODULO expression .)

  ! PLUS            [ shift and go to state 9 ]
  ! MINUS           [ shift and go to state 10 ]
  ! TIMES           [ shift and go to state 11 ]
  ! DIVIDE          [ shift and go to state 12 ]
  ! MODULO          [ shift and go to state 13 ]


state 22

    (4) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 4 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 4 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 4 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 4 (expression -> LPAREN expression RPAREN .)
    MODULO          reduce using rule 4 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 4 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 4 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 4 (expression -> LPAREN expression RPAREN .)


state 23

    (12) expression -> NAME LPAREN args . RPAREN

    RPAREN          shift and go to state 25


state 24

    (13) args -> expression . COMMA args
    (14) args -> expression .
    (5) expression -> expression . PLUS expression
    (6) expression -> expression . MINUS expression
    (7) expression -> expression . TIMES expression
    (8) expression -> expression . DIVIDE expression
    (9) expression -> expression . MODULO expression

    COMMA           shift and go to state 26
    RPAREN          reduce using rule 14 (args -> expression .)
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    TIMES           shift and go to state 11
    DIVIDE          shift and go to state 12
    MODULO          shift and go to state 13


state 25

    (12) expression -> NAME LPAREN args RPAREN .

    PLUS            reduce using rule 12 (expression -> NAME LPAREN args RPAREN .)
    MINUS           reduce using rule 12 (expression -> NAME LPAREN args RPAREN .)
    TIMES           reduce using rule 12 (expression -> NAME LPAREN args RPAREN .)
    DIVIDE          reduce using rule 12 (expression -> NAME LPAREN args RPAREN .)
    MODULO          reduce using rule 12 (expression -> NAME LPAREN args RPAREN .)
    $end            reduce using rule 12 (expression -> NAME LPAREN args RPAREN .)
    RPAREN          reduce using rule 12 (expression -> NAME LPAREN args RPAREN .)
    COMMA           reduce using rule 12 (expression -> NAME LPAREN args RPAREN .)


state 26

    (13) args -> expression COMMA . args
    (13) args -> . expression COMMA args
    (14) args -> . expression
    (15) args -> .
    (1) expression -> . INT
    (2) expression -> . FLOAT
    (3) expression -> . STRING
    (4) expression -> . LPAREN expression RPAREN
    (5) expression -> . expression PLUS expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . expression TIMES expression
    (8) expression -> . expression DIVIDE expression
    (9) expression -> . expression MODULO expression
    (10) expression -> . MINUS expression
    (11) expression -> . TAGPATTERN
    (12) expression -> . NAME LPAREN args RPAREN

    RPAREN          reduce using rule 15 (args -> .)
    INT             shift and go to state 2
    FLOAT           shift and go to state 3
    STRING          shift and go to state 4
    LPAREN          shift and go to state 5
    MINUS           shift and go to state 6
    TAGPATTERN      shift and go to state 7
    NAME            shift and go to state 8

    expression                     shift and go to state 24
    args                           shift and go to state 27

state 27

    (13) args -> expression COMMA args .

    RPAREN          reduce using rule 13 (args -> expression COMMA args .)

